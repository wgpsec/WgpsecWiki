(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{817:function(a,t,s){"use strict";s.r(t);var e=s(105),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"伪随机数"}},[a._v("伪随机数 "),s("a",{staticClass:"header-anchor",attrs:{href:"#伪随机数"}},[a._v("#")])]),a._v(" "),s("h2",{attrs:{id:"简介"}},[a._v("简介 "),s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("p",[a._v("伪随机数是用确定性的算法计算出来自[0,1]均匀分布的随机数序列。并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，若使用的初值（种子）不变，那么伪随机数的数序也不变。常见的有php伪随机数和java伪随机数。")])]),a._v(" "),s("h2",{attrs:{id:"php伪随机数"}},[a._v("PHP伪随机数 "),s("a",{staticClass:"header-anchor",attrs:{href:"#php伪随机数"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("主要由两个函数组成")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("mt_scrand() //播种 Mersenne Twister 随机数生成器。\nmt_rand()   //生成随机数\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("ul",[s("li",[a._v("由"),s("code",[a._v("mt_scrand()")]),a._v("通过seed分发种子，有了种子以后，通过"),s("code",[a._v("mt_rand()")]),a._v("生成伪随机数")]),a._v(" "),s("li",[a._v("我们测试入如下代码")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('<?php  \nmt_srand(1);    \necho mt_rand()."###";\necho mt_rand()."###";\necho mt_rand()."###";\n?>  \n<?php  \nmt_srand(1);    \necho mt_rand()."###";\necho mt_rand()."###";\n?> \n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("ul",[s("li",[a._v("会得到如下的结果")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("895547922###2141438069###1546885062###  \n895547922###2141438069### \n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("ul",[s("li",[a._v("很明显，当我们发现种子不变时，实际上生成的伪随机数是不变的，这就是伪随机数的漏洞所在。")])])]),a._v(" "),s("h3",{attrs:{id:"mt-rand源码简要分析"}},[a._v("mt_rand源码简要分析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mt-rand源码简要分析"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("通过mt_rand源码分析理解为什么mt_rand()只播种一次")]),a._v(" "),s("li",[a._v("在"),s("code",[a._v("/ext/standard/rand.c")]),a._v("中可以看到，播完种后，将会将 mt_rand_is_seeded 的值设置为1，因此mt_rand只播种一次")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/PRF/mt_rand1.jpg",alt:"mt_rand1"}})]),a._v(" "),s("h3",{attrs:{id:"攻击方法"}},[a._v("攻击方法 "),s("a",{staticClass:"header-anchor",attrs:{href:"#攻击方法"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("专门进行种子爆破的"),s("a",{attrs:{href:"https://www.openwall.com/php_mt_seed/",target:"_blank",rel:"noopener noreferrer"}},[a._v("php_mt_seed"),s("OutboundLink")],1),a._v("工具")]),a._v(" "),s("li",[s("a",{attrs:{href:"https://www.anquanke.com/post/id/196831",target:"_blank",rel:"noopener noreferrer"}},[a._v("无需暴力破解计算原始种子"),s("OutboundLink")],1),a._v("，前提要求是给定间隔226个值的两个mt_rand()输出结果，例如第一个和第228个mt_rand()的输出结果")])])]),a._v(" "),s("h2",{attrs:{id:"java伪随机数"}},[a._v("Java伪随机数 "),s("a",{staticClass:"header-anchor",attrs:{href:"#java伪随机数"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("以java为例，强伪随机数RNG实现"),s("code",[a._v("java.security.SecureRandom")]),a._v("类，该类使用临时文件夹中大小，线程休眠时间等的值作为随机数种子；而弱伪随机数实现PRNG"),s("code",[a._v("java.util.Random")]),a._v("类，默认使用当前时间作为种子，并且采用线性同余法计算下一个随机数。")]),a._v(" "),s("li",[a._v("我们测试如下代码")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('import java.util.Random;\n\npublic class rand{\n\tpublic static void main(String[] args){\n\t\tRandom r1 = new Random(1);\n\t\tSystem.out.println("r1.nextInt(12) = " + r1.nextInt(12));\n\t\t\n\t\tRandom r2 = new Random(1);\n\t\tSystem.out.println("r2.nextInt(12) = " + r2.nextInt(12));\n\t}\n}\n')])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("ul",[s("li",[a._v("会得到如下结果")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("r1.nextInt(12) = 9\nr2.nextInt(12) = 9\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])]),s("ul",[s("li",[a._v("很明显，无论执行多少次，代码的结果不会改变。Random生成的随机数是伪随机数。")])])]),a._v(" "),s("h3",{attrs:{id:"java-util-random的可预测性"}},[a._v("java.util.Random的可预测性 "),s("a",{staticClass:"header-anchor",attrs:{href:"#java-util-random的可预测性"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("调用"),s("code",[a._v("random.nextInt")]),a._v("方法生成三个连续的随机数，要求根据前两个随机数去预测第三个随机数")]),a._v(" "),s("li",[a._v("查看源代码，可以看见直接调用的next方法，传递的参数是32")])])]),a._v(" "),s("img",{staticStyle:{zoom:"150%"},attrs:{src:"/images/PRF/java_random1.jpg",alt:"java_random1"}}),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("追踪next方法，可以看到前一个随机数种子（oldseed）和后一个随机数种子（nextseed）都被定义为long类型，方法返回的值就是下一个种子右移16位后强制转换int的结果")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/PRF/java_random2.jpg",alt:"java_random2"}})]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("while里的compareAndSet方法只是比较当前的种子值是否为oldseed，如果是的话就更新为nextseed，一般情况下都会返回true")]),a._v(" "),s("li",[a._v("下一个种子的更新算法就在do-while循环里面："),s("code",[a._v("nextseed = (oldseed * multiplier + addend) & mask")]),a._v("，种子的初始值是将当前系统时间带入运算得到的结果")]),a._v(" "),s("li",[a._v("返回开头的类定义可以看到这几个常量属性的值")])])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/PRF/java_random3.jpg",alt:"java_random3"}})]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("这个种子的更新算法本质上就是一个线性同余生成器")])])]),a._v(" "),s("h4",{attrs:{id:"线性同余生成器-lcg"}},[a._v("线性同余生成器（LCG） "),s("a",{staticClass:"header-anchor",attrs:{href:"#线性同余生成器-lcg"}},[a._v("#")])]),a._v(" "),s("p",[a._v("LCG的公式如下：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/PRF/LCG.jpg",alt:"LCG"}})]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("和上面的代码对比可以看出是基本一致的，因为和mask常量做与运算就相当于是舍弃高位，保留2进制的低47位，也就相当于模2的48次方。我们既然都有了常量的值了，就可以去做第三个随机数的预测了。")])])]),a._v(" "),s("h4",{attrs:{id:"预测方法"}},[a._v("预测方法 "),s("a",{staticClass:"header-anchor",attrs:{href:"#预测方法"}},[a._v("#")])]),a._v(" "),s("blockquote",[s("ul",[s("li",[a._v("如果把生成第一个随机数的种子定义为seed1，seed2，seed3往后顺延的话，seed1右移16位就是第一个随机数的值，说明第一个随机数丢了16位，导致seed1就有2的16次方种可能。")]),a._v(" "),s("li",[a._v("把2的16次方种可能带入计算下一个seed2，并且右移查看是否和第二个随机数的值相等就能确定是否正确的找到了seed1。")]),a._v(" "),s("li",[a._v("如果前两个数是正数，但第三个数是负数，只需要对得到的补码再求一次补码即可，也就是取反后加1。")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);